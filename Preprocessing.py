# -*-coding: utf-8 -*-
# coding: utf8
import os, subprocess
import string
import sys
import pandas as pd
import csv



# datapath='C:\Users\BHC\Desktop\데이터 챌린지\malw\New folder'
# os.listdir('C:\Users\BHC\Desktop\데이터 챌린지\malw\New folder')

def main(datapath):
    print("test")
    rlt=open("C:\\Users\BHC\Desktop\DC\malw\\result_test1129.csv",'w',newline='') #result_test1129.csv = 전처리한 데이터셋 결과
    csvout = csv.writer(rlt)
    for (path, dir, files) in os.walk(datapath):
        print(path)
        for filename in files:
            ext = os.path.splitext(filename)[-1]
            countK = 0
            countS = 0
            countU = 0
            countD = 0
            countH = 0
            countR = 0
            countA = 0
            countJ = 0
            # name = os.path.splitext(filename)[0]
            if ext == '.str':
                #print("%s\%s" % (path, filename))
                path1=path+"\\"+filename
                sizeR = 0
                size=(os.path.getsize("%s\%s" % (path, filename)))
                if (size >=15000000): sizeR=7							#str 파일의 크기를 분류
                elif (size >=10000000) : sizeR=6
                elif (size >= 1500000): sizeR = 5
                elif (size >= 1000000):
                    sizeR = 4
                elif (size >= 150000):
                    sizeR = 3
                elif (size >= 100000):
                    sizeR = 2
                elif (size >= 15000):
                    sizeR = 1
                else : sizeR = 0

                text=open(path1,"r")

                while True:											#str에서 각각의 특성값을 호출하는 빈도수를 출력 
                    line = text.readline().lower()
                    countK = countK + line.count('kernel')
                    countS = countS + line.count('system32')
                    countU = countU + line.count('user32')
                    countD = countD + line.count('.dll')
                    countH = countH + line.count('http')
                    countR = countR + line.count('.rsrc')
                    countA = countA + line.count('advapi')
                    countJ = countJ + line.count('jmp')

                    if not line: break


                    




                text.close()
                print("Kernel :", countK)
                print("System32 :", countS)
                print("User32 :", countU)
                print("DLL :", countD)
                print("size :",sizeR)

                csvout.writerow([filename,countK,countS,countU,countD,countH,countR,countA,countJ,sizeR]) #전처리 결과를 csv 파일에 쓰기






            print("$$$$$$ text end $$$$$$$")

    csvout.close()




if __name__ == '__main__':
    sharedUserId = False
    debuggable = False
    main('C:\\Users\BHC\Desktop\DC\malw\\2nd')  #str 파일이 있는 경로
    print("END")